% system, bluetooth

# Enable and start bluetooth daemon
sudo systemctl enable --now bluetooth

% system, clock, time, date

# Manually synchronize clock with network
sudo ntpd -qg

# Write current software clock to hardware clock
sudo hwclock --systohc

# Show hardware clock
sudo hwclock --show

# Show system clock
timedatectl status

% system, disk, fstab
# Verify /etc/fstab file
sudo findmnt --verify

# List disks
ls -al /dev/disk/by-uuid

% system, fix
# Restart sound (pipewire, wireplumber)
systemctl --user restart wireplumber pipewire pipewire-pulse

# Fix flathub mime part1
systemctl --user import-environment PATH

# Fix flathub mime part2
systemctl --user restart xdg-desktop-portal.service

% tools, ventoy

# Launch Ventoy WebGUI
sudo ventoy-web

% tools, magick

# Convert and lower quality (60) of image
magick <source> -quality 60 <target>

# Batch convert and quality of image - in default example all .jpg imageges converted to webp
mogrify -format webp *.jpg

# Recursive Batch convert and quality of image (parameters = quality, path, format, ...; source = *.jpg)
fd <target> --exec mogrify <parameters> <source>

% tools, python, qtile

# Basic python test for Qtile config
python3 -m py_compile ~/.config/qtile/config.py

# qtile command in terminal
qtile cmd-obj -o cmd

% tools, fd

# use fd command to find recursively something and do command for every result
fd <target> --exec <command>

# find X and remove all file that contain X
fd <target> --exec trash {}

% tools, ffmpeg

# convert AV file into other format (and adjust sound quality)
ffmpeg -i <source> <target>

# batch convert AV files (adjust input and output format)
for i in *.mp3; do ffmpeg -i "$i" "${i%.*}.ogg"; done

# cut part AV file; -ss 1 =start; -t 2 =end (in seconds) end is how many seconds after start not total value
ffmpeg -ss 1 -i source.format -t 2 target.foramt

% tools, pdf
# conver PDF (or part of it to image file) target without format, X+Y first and last page
pdftoppm -jpeg <source> -f X -l Y <target>

# extract images from PDF (source is .pdf file, target is folder and name - ~/pic/im will put everything in ~/pic named im-XX)(-j jpeg output; -l OR -f <int> first/last page to convert)
pdfimages -j <source> <target>

# separate pdf pages
pdfseparate <source> -f X -l Y <target example target%d.pdf>

# unite pdf files to one
pdfunite <source list of files to unite> <target>

% package, packman, aur, flatpak

# Fix keys
alias fixkey="/usr/local/bin/arcolinux-fix-pacman-databases-and-keys"

# Fix pacman conf
alias fix-pacman-conf="/usr/local/bin/arcolinux-fix-pacman-conf"

# Fix pacmman key server
alias fix-pacman-keyserver="/usr/local/bin/arcolinux-fix-pacman-gpg-conf"

# Fix grub
alias fix-grub="/usr/local/bin/arcolinux-fix-grub"

# Install package by name
sudo pacman -S <pkg_name>

# Install package by name from specific repo
sudo pacman -S <repo_name>/<pkg_name>

# Search for package by name
sudo pacman -Ss <pkg_name>

# Upgrade packages
sudo pacman -Syu

# Remove package and dependencies by name
sudo pacman -Rs <pkg_name>

# Remove package and dependencies and config files by name
sudo pacman -Rns <pkg_name>

# FORCE remove package and dependencies and config files by name
sudo pacman -Rnsdd <pkg_name>

# Remove orphan dependencies
sudo pacman -Qdtq | sudo pacman -Rns -

#Cleanup orphaned packages ARCO:cleanup
sudo pacman -Rns $(pacman -Qtdq)

# Remove orphan dependencies extra method
sudo pacman -Qqd | pacman -Rsu --print -

# Remove packages no longer in any repositories
sudo pacman -Qmq | sudo pacman -Rs -

# Display local package information
pacman -Qi <pkg_name>

# Display remote package information
pacman -Si <pkg_name>

# List packages wwith update available
pacman -Qu

# List installed packages
pacman -Q

# List explicitily installed packages
pacman -Qe

# List packages from AUR
pacman -Qm

# List installed dependencies packages
pacman -Qd

# This will generate a list of explicitly installed packages
sudo pacman -Qqe

#This will generate a list of explicitly installed packages without dependencies
sudo pacman -Qqet

# list of AUR packages
sudo pacman -Qqem

% arco

# What ISO am I using? ARCO: iso
cat /etc/dev-rel | awk -F '=' '/ISO/ {print $2}'

# System info ARCO: probe
sudo -E hw-probe -all -upload

#hardware info --short
hwinfo --short

# Update list of GRUB entries ini the menu ARCO:grub-update
sudo grub-mkconfig -o /boot/grub/grub.cfg

# ARCO: grub issue 08/2022
sudo grub-install --target=x86_64-efi --efi-directory=/boot/efi

# ARCO:add new fonts
sudo fc-cache -fv

% nodejs, foundryvtt

# NODEJS FoundryVTT
node /home/ptc/Games/FoundryVTT/foundryvtt/resources/app/main.js --dataPath=/home/ptc/Games/FoundryVTT/foundrydata

% system, systemctl

# list services
systemctl list-units --type=service

# list all services
systemctl list-units --type=service --all

# list running services
systemctl list-units --type=service --state=running

% nixos, home-manager

# fix nix flake "cached failure of attribute" - !!run in flake folder!!
sudo nixos-rebuild switch --flake .# --option eval-cache false

# list channels
nix-channel --list

# nix list generations
nix profile history --profile /nix/var/nix/profiles/system

# delete generation
sudo rm /nix/var/nix/profiles/system-

# collect garbage
nix-collect-garbage

# collect garbage older than 14 days
nix-collect-garbage --delete-older-than 14d

# nix store optimise
nix-store --optimise

# nix store garbace collection
nix-store --gc

# list home manager generations
home-manager generations

% Git

# update git submodule (like for Hugo Theme)
git submodule update --remote --merge

% boot

# list entries
sudo bootctl list

# remove boot entry link
sudo rm /boot/loader/entries/

# remove boot entry
sudo bootctl cleanup
